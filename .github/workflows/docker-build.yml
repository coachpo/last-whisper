name: Last Whisper CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'last-whisper-backend/**'
      - 'last-whisper-frontend/**'
      - 'last-whisper-backend/Dockerfile'
      - 'last-whisper-frontend/Dockerfile'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'last-whisper-backend/**'
      - 'last-whisper-frontend/**'
      - 'last-whisper-backend/Dockerfile'
      - 'last-whisper-frontend/Dockerfile'
      - 'docker-compose.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/last-whisper-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/last-whisper-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [ backend, frontend ]

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: ./last-whisper-${{ matrix.service }}
          file: ./last-whisper-${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64
          build-args: ${{ matrix.service == 'frontend' && 'NEXT_PUBLIC_API_URL=https://lw.687786.xyz/apis
            NEXT_PUBLIC_DEBUG_LOGGING=false
            NODE_ENV=production
            PORT=3000
            HOSTNAME=0.0.0.0' || '' }}

      - name: Inspect pushed manifest
        run: |
          REF="${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:latest"
          echo "Inspecting $REF"
          docker buildx imagetools inspect "$REF"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        service: [ backend, frontend ]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
