name: Build Images

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Select service to build'
        type: choice
        required: true
        default: all
        options:
          - all
          - backend
          - frontend

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  # Service and directory names
  BACKEND_SERVICE: backend
  FRONTEND_SERVICE: frontend
  PROJECT_PREFIX: last-whisper
  # Platform and build settings
  BUILD_PLATFORM: linux/arm64
  DOCKER_DRIVER: docker-container
  # Notification settings
  BARK_SERVER_URL: ${{ secrets.BARK_SERVER_URL }}
  BARK_SUCCESS_SOUND: birdsong
  BARK_FAILURE_SOUND: shake
  BARK_ICON: https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png
  BARK_GROUP: LastWhisper
  # Frontend-specific environment variables from repository variables
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_DEBUG_LOGGING: ${{ vars.NEXT_PUBLIC_DEBUG_LOGGING }}
  NODE_ENV: ${{ vars.NODE_ENV }}
  HOSTNAME: ${{ vars.HOSTNAME }}
  PORT: ${{ vars.PORT }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJSON(github.event_name == 'workflow_dispatch' && inputs.service != 'all' && format('["{0}"]', inputs.service) || '["backend","frontend"]') }}

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up QEMU (for arm64 emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        if: ${{ github.event_name == 'workflow_dispatch' }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (arm64)
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./${{ env.PROJECT_PREFIX }}-${{ matrix.service }}
          file: ./${{ env.PROJECT_PREFIX }}-${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name == 'workflow_dispatch' }}
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.service == env.BACKEND_SERVICE && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ matrix.service == env.BACKEND_SERVICE && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:v${{ github.run_number }}
          cache-from: |
            type=gha,scope=${{ matrix.service }}
            ${{ github.event_name == 'workflow_dispatch' && format('type=registry,ref={0}/{1}:cache', env.REGISTRY, matrix.service == env.BACKEND_SERVICE && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND) || '' }}
            ${{ github.event_name == 'workflow_dispatch' && format('type=registry,ref={0}/{1}:buildcache', env.REGISTRY, matrix.service == env.BACKEND_SERVICE && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND) || '' }}
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.service }}
            ${{ github.event_name == 'workflow_dispatch' && format('type=registry,ref={0}/{1}:cache,mode=max', env.REGISTRY, matrix.service == env.BACKEND_SERVICE && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND) || '' }}
            ${{ github.event_name == 'workflow_dispatch' && format('type=registry,ref={0}/{1}:buildcache,mode=max', env.REGISTRY, matrix.service == env.BACKEND_SERVICE && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND) || '' }}
          platforms: ${{ env.BUILD_PLATFORM }}
          provenance: false
          sbom: false
          build-args: |
            ${{ matrix.service == env.FRONTEND_SERVICE && format('NEXT_PUBLIC_API_URL={0}
            NEXT_PUBLIC_DEBUG_LOGGING={1}
            NODE_ENV={2}
            PORT={3}
            HOSTNAME={4}', env.NEXT_PUBLIC_API_URL, env.NEXT_PUBLIC_DEBUG_LOGGING, env.NODE_ENV, env.PORT, env.HOSTNAME) || '' }}

  notify-completion:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Notify via Bark
        if: always()
        uses: harryzcy/action-bark@v2.3.0
        with:
          status: ${{ needs.build-and-push.result }}
          on_status: success, failure, cancelled
          title: "${{ needs.build-and-push.result == 'success' && 'üöÄ Pipeline Success' || '‚ùå Pipeline Failed' }}"
          body: "${{ needs.build-and-push.result == 'success' && (github.event_name == 'workflow_dispatch' && inputs.service != 'all' && format('‚úÖ the {0} image built successfully!', inputs.service) || '‚úÖ backend and frontend images built successfully!') || format('üí• Build failed: {0}', needs.build-and-push.result) }}"
          device_key: ${{ secrets.BARK_DEVICE_KEY }}
          level: active
          sound: ${{ needs.build-and-push.result == 'success' && env.BARK_SUCCESS_SOUND || env.BARK_FAILURE_SOUND }}
          icon: ${{ env.BARK_ICON }}
          group: ${{ env.BARK_GROUP }}
          bark_server_url: ${{ env.BARK_SERVER_URL }}