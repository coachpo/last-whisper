name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'last-whisper-backend/**'
      - 'last-whisper-frontend/**'
      - 'last-whisper-backend/Dockerfile'
      - 'last-whisper-frontend/Dockerfile'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'last-whisper-backend/**'
      - 'last-whisper-frontend/**'
      - 'last-whisper-backend/Dockerfile'
      - 'last-whisper-frontend/Dockerfile'
      - 'docker-compose.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/last-whisper-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/last-whisper-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      submodules: read

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.PAT_TOKEN }}

    - name: Debug directory structure
      run: |
        echo "=== Root directory contents ==="
        ls -la
        echo "=== Backend directory contents ==="
        ls -la last-whisper-backend/ || echo "Backend directory not found"
        echo "=== Frontend directory contents ==="
        ls -la last-whisper-frontend/ || echo "Frontend directory not found"
        echo "=== Backend Dockerfile ==="
        ls -la last-whisper-backend/Dockerfile || echo "Backend Dockerfile not found"
        echo "=== Frontend Dockerfile ==="
        ls -la last-whisper-frontend/Dockerfile || echo "Frontend Dockerfile not found"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./last-whisper-${{ matrix.service }}
        file: Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:latest
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
