name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/last-whisper-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/last-whisper-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [ backend, frontend ]

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up QEMU (for arm64 emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: ./last-whisper-${{ matrix.service }}
          file: ./last-whisper-${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64
          provenance: true
          build-args: |
            ${{ matrix.service == 'frontend' && 'NEXT_PUBLIC_API_URL=https://lw.687786.xyz/apis
            NEXT_PUBLIC_DEBUG_LOGGING=false
            NODE_ENV=production
            PORT=3000
            HOSTNAME=0.0.0.0' || '' }}

      - name: Inspect pushed manifest
        run: |
          REF="${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:latest"
          echo "Inspecting $REF"
          docker buildx imagetools inspect "$REF"

      - name: Send success notification via Bark
        if: success()
        run: |
          curl -X POST "https://bark.687786.xyz/GSDZFBaQN7hTMGV4wuLYGM/üê≥%20Docker%20Build%20Success/‚úÖ%20${{ matrix.service }}%20image%20built%20and%20pushed%20successfully%20to%20${{ env.REGISTRY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "sound": "birdsong",
              "icon": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
              "group": "LastWhisper"
            }'

      - name: Send failure notification via Bark
        if: failure()
        run: |
          curl -X POST "https://bark.687786.xyz/GSDZFBaQN7hTMGV4wuLYGM/üê≥%20Docker%20Build%20Failed/‚ùå%20${{ matrix.service }}%20image%20build%20failed.%20Check%20the%20workflow%20logs%20for%20details." \
            -H "Content-Type: application/json" \
            -d '{
              "sound": "shake",
              "icon": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
              "group": "LastWhisper"
            }'

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        service: [ backend, frontend ]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Send security scan notification via Bark
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            curl -X POST "https://bark.687786.xyz/GSDZFBaQN7hTMGV4wuLYGM/üîí%20Security%20Scan%20Complete/‚úÖ%20Security%20scan%20completed%20for%20${{ matrix.service }}.%20Results%20uploaded%20to%20GitHub%20Security%20tab." \
              -H "Content-Type: application/json" \
              -d '{
                "sound": "birdsong",
                "icon": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
                "group": "LastWhisper"
              }'
          else
            curl -X POST "https://bark.687786.xyz/GSDZFBaQN7hTMGV4wuLYGM/üîí%20Security%20Scan%20Failed/‚ö†Ô∏è%20Security%20scan%20failed%20for%20${{ matrix.service }}.%20Check%20the%20workflow%20logs%20for%20details." \
              -H "Content-Type: application/json" \
              -d '{
                "sound": "shake",
                "icon": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
                "group": "LastWhisper"
              }'
          fi

  notify-completion:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always()
    steps:
      - name: Send workflow completion notification via Bark
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
            curl -X POST "https://bark.687786.xyz/GSDZFBaQN7hTMGV4wuLYGM/üöÄ%20CI%20CD%20Pipeline%20Complete/üéâ%20CI%20CD%20pipeline%20completed%20successfully!%20All%20Docker%20images%20built,%20pushed,%20and%20security%20scanned." \
              -H "Content-Type: application/json" \
              -d '{
                "sound": "birdsong",
                "icon": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
                "group": "LastWhisper"
              }'
          else
            curl -X POST "https://bark.687786.xyz/GSDZFBaQN7hTMGV4wuLYGM/üöÄ%20CI%20CD%20Pipeline%20Failed/üí•%20CI%20CD%20pipeline%20failed.%20Build:%20${{ needs.build-and-push.result }},%20Security:%20${{ needs.security-scan.result }}" \
              -H "Content-Type: application/json" \
              -d '{
                "sound": "shake",
                "icon": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
                "group": "LastWhisper"
              }'
          fi
