name: Build Images

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Select service to build'
        type: choice
        required: true
        default: all
        options:
          - all
          - backend
          - frontend

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  # Service and directory names
  BACKEND_SERVICE: backend
  FRONTEND_SERVICE: frontend
  PROJECT_PREFIX: last-whisper
  # Platform and build settings
  BUILD_PLATFORM: linux/arm64
  DOCKER_DRIVER: docker-container
  # Notification settings
  BARK_SERVER_URL: ${{ secrets.BARK_SERVER_URL }}
  BARK_SUCCESS_SOUND: birdsong
  BARK_FAILURE_SOUND: shake
  BARK_ICON: https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png
  BARK_GROUP: LastWhisper
  # Frontend-specific environment variables from repository variables
  NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_DEBUG_LOGGING: ${{ vars.NEXT_PUBLIC_DEBUG_LOGGING }}
  NODE_ENV: ${{ vars.NODE_ENV }}
  HOSTNAME: ${{ vars.HOSTNAME }}
  PORT: ${{ vars.PORT }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJSON(github.event_name == 'workflow_dispatch' && inputs.service != 'all' && format('["{0}"]', inputs.service) || '["backend","frontend"]') }}

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up QEMU (for arm64 emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ env.DOCKER_DRIVER }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        if: ${{ github.event_name == 'workflow_dispatch' }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service == env.BACKEND_SERVICE && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=branch

      - name: Build and push Docker image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.PROJECT_PREFIX }}-${{ matrix.service }}
          file: ./${{ env.PROJECT_PREFIX }}-${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name == 'workflow_dispatch' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.BUILD_PLATFORM }}
          provenance: false
          sbom: false
          build-args: |
            ${{ matrix.service == env.FRONTEND_SERVICE && format('NEXT_PUBLIC_API_URL={0}
            NEXT_PUBLIC_DEBUG_LOGGING={1}
            NODE_ENV={2}
            PORT={3}
            HOSTNAME={4}', env.NEXT_PUBLIC_API_URL, env.NEXT_PUBLIC_DEBUG_LOGGING, env.NODE_ENV, env.PORT, env.HOSTNAME) || '' }}

  cleanup-untagged:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]
    if: ${{ always() && github.event_name == 'workflow_dispatch' }}
    timeout-minutes: 15
    permissions:
      packages: write
    strategy:
      matrix:
        service: [ backend, frontend ]
    steps:
      - name: Delete UNTAGGED versions for ${{ matrix.service }}
        uses: actions/delete-package-versions@v5
        with:
          owner: ${{ github.repository_owner }}
          package-type: container
          package-name: ${{ env.PROJECT_PREFIX }}/${{ matrix.service }}
          delete-only-untagged-versions: true

  notify-completion:
    runs-on: ubuntu-latest
    needs: [ build-and-push, cleanup-untagged ]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Send workflow completion notification via Bark
        run: |
          BUILD_STATUS="${{ needs.build-and-push.result }}"
          CLEANUP_STATUS="${{ needs.cleanup-untagged.result }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.service }}" != "all" ]; then
            TARGET_MSG="the ${{ inputs.service }} image"
          else
            TARGET_MSG="backend and frontend images"
          fi

          if [ "$BUILD_STATUS" = "success" ] && { [ "$CLEANUP_STATUS" = "success" ] || [ "$CLEANUP_STATUS" = "skipped" ]; }; then
            TITLE="üöÄ Pipeline Success"
            BODY="‚úÖ ${TARGET_MSG} built successfully! Cleanup completed."
            SOUND="${{ env.BARK_SUCCESS_SOUND }}"
          elif [ "$BUILD_STATUS" = "success" ] && [ "$CLEANUP_STATUS" != "success" ]; then
            TITLE="‚ö†Ô∏è Pipeline Partial Success"
            BODY="‚úÖ Images built successfully but cleanup failed: $CLEANUP_STATUS"
            SOUND="${{ env.BARK_FAILURE_SOUND }}"
          else
            TITLE="‚ùå Pipeline Failed"
            BODY="üí• Build failed: $BUILD_STATUS | Cleanup: $CLEANUP_STATUS"
            SOUND="${{ env.BARK_FAILURE_SOUND }}"
          fi

          curl -X POST "${{ env.BARK_SERVER_URL }}/push" \
            -H "Content-Type: application/json" \
            -d "{\"title\":\"$TITLE\",\"body\":\"$BODY\",\"sound\":\"$SOUND\",\"icon\":\"${{ env.BARK_ICON }}\",\"group\":\"${{ env.BARK_GROUP }}\"}"