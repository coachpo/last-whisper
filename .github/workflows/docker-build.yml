name: Last Whisper CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'last-whisper-backend/**'
      - 'last-whisper-frontend/**'
      - 'last-whisper-backend/Dockerfile'
      - 'last-whisper-frontend/Dockerfile'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'last-whisper-backend/**'
      - 'last-whisper-frontend/**'
      - 'last-whisper-backend/Dockerfile'
      - 'last-whisper-frontend/Dockerfile'
      - 'docker-compose.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/last-whisper-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/last-whisper-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [ backend, frontend ]

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up QEMU (for arm64 emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: ./last-whisper-${{ matrix.service }}
          file: ./last-whisper-${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64
          provenance: true
          build-args: ${{ matrix.service == 'frontend' && 'NEXT_PUBLIC_API_URL=https://lw.687786.xyz/apis
            NEXT_PUBLIC_DEBUG_LOGGING=false
            NODE_ENV=production
            PORT=3000
            HOSTNAME=0.0.0.0' || '' }}

      - name: Inspect pushed manifest
        run: |
          REF="${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:latest"
          echo "Inspecting $REF"
          docker buildx imagetools inspect "$REF"

      - name: Clean up old images (keep latest only)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SERVICE: ${{ matrix.service }}
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail

          if [ "${SERVICE}" = "backend" ]; then
            PACKAGE_NAME="last-whisper-backend"
          else
            PACKAGE_NAME="last-whisper-frontend"
          fi

          echo "Cleaning up old versions of ${PACKAGE_NAME} under owner ${OWNER}"

          # Determine whether owner is an org (200) or a user (404)
          if gh api "orgs/${OWNER}" >/dev/null 2>&1; then
            LIST_PATH="/orgs/${OWNER}/packages/container/${PACKAGE_NAME}/versions"
            DELETE_BASE="/orgs/${OWNER}/packages/container/${PACKAGE_NAME}/versions"
          else
            LIST_PATH="/user/packages/container/${PACKAGE_NAME}/versions"
            DELETE_BASE="/user/packages/container/${PACKAGE_NAME}/versions"
          fi

          # Check if package exists first
          if ! gh api "${LIST_PATH}" >/dev/null 2>&1; then
            echo "Package ${PACKAGE_NAME} does not exist yet. No cleanup needed."
            exit 0
          fi

          # List all versions across pages, newest first; drop the newest; output IDs
          VERSIONS=$(gh api --paginate \
              -H "Accept: application/vnd.github+json" \
              "${LIST_PATH}" 2>/dev/null | jq -r '
                if type == "array" and length > 0 then
                  sort_by(.created_at) | reverse | .[1:] | .[].id
                else
                  empty
                end
              ')

          if [ -z "${VERSIONS}" ]; then
            echo "No old versions to delete."
            exit 0
          fi

          for version_id in ${VERSIONS}; do
            echo "Deleting old version ${version_id}"
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              "${DELETE_BASE}/${version_id}" || true
          done

          echo "Cleanup completed - only latest version remains"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        service: [ backend, frontend ]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
