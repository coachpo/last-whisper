name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/last-whisper-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/last-whisper-frontend
  NEXT_PUBLIC_API_URL: https://lw.687786.xyz/apis
  NEXT_PUBLIC_DEBUG_LOGGING: false
  NODE_ENV: production
  PORT: 3000
  HOSTNAME: 0.0.0.0

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [ backend, frontend ]

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up QEMU (for arm64 emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: ./last-whisper-${{ matrix.service }}
          file: ./last-whisper-${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64
          provenance: false
          sbom: false
          build-args: |
            ${{ matrix.service == 'frontend' && format('NEXT_PUBLIC_API_URL={0}
            NEXT_PUBLIC_DEBUG_LOGGING={1}
            NODE_ENV={2}
            PORT={3}
            HOSTNAME={4}', env.NEXT_PUBLIC_API_URL, env.NEXT_PUBLIC_DEBUG_LOGGING, env.NODE_ENV, env.PORT, env.HOSTNAME) || '' }}

      - name: Inspect pushed manifest
        run: |
          REF="${{ env.REGISTRY }}/${{ matrix.service == 'backend' && env.IMAGE_NAME_BACKEND || env.IMAGE_NAME_FRONTEND }}:latest"
          echo "Inspecting $REF"
          docker buildx imagetools inspect "$REF"

  notify-completion:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()
    steps:
      - name: Send workflow completion notification via Bark
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            curl -X POST "https://bark.687786.xyz/GSDZFBaQN7hTMGV4wuLYGM/ðŸš€%20CI%20CD%20Pipeline%20Complete/ðŸŽ‰%20CI%20CD%20pipeline%20completed%20successfully!%20All%20Docker%20images%20built%20and%20pushed." \
              -H "Content-Type: application/json" \
              -d '{
                "sound": "birdsong",
                "icon": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
                "group": "LastWhisper"
              }'
          else
            curl -X POST "https://bark.687786.xyz/GSDZFBaQN7hTMGV4wuLYGM/ðŸš€%20CI%20CD%20Pipeline%20Failed/ðŸ’¥%20CI%20CD%20pipeline%20failed.%20Build:%20${{ needs.build-and-push.result }}" \
              -H "Content-Type: application/json" \
              -d '{
                "sound": "shake",
                "icon": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
                "group": "LastWhisper"
              }'
          fi